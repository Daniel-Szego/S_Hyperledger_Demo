/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.sequence.model

// CONCEPTS

// Question if it should be used this way ?
concept Tag {
	o String name
    o String value
}

concept Snapshot {
	o String[] actionTags
    o String[] flavourTags
    o String[] sourceAccountTags
    o String[] destinationAccountTags
    o String[] tokenTags
    o String[] transactionTags
}

enum FeedType {
	o Action
    o Transaction
}

enum ActionType {
	o Issue
    o Transfer
    o Retire
}

enum TransactionState {
	o Proposal
    o Executed
}
// ASSETS

abstract asset AbstractSequenceAsset identified by id {
	o String id
}

asset Flavor extends AbstractSequenceAsset {
	o String tags optional
	--> Key[] keyIds
    o Integer quorum  
}

asset Token extends AbstractSequenceAsset {
    o Integer amount
    o String tags optional
    --> Flavor flavorID 
    o String flavorTags optional
    o Account accountId
    o String accountTags optional
}

asset Action extends AbstractSequenceAsset {
    o String timestamp
    o ActionType type
    o Integer amount
    o Integer requiredApprovementNumber
    o Key[] approvments
    --> Flavor flavorId
    --> Account sourceAccountId optional
    o String filter
    o String[] filterParams
    o Account destinationAccountId optional
    o Snapshot snapshot
    o String tags optional
}

asset Transaction extends AbstractSequenceAsset {
    o String timestamp
    o Integer sequenceNumber
    o TransactionState transactionState
    --> Action[] actions
    o String tags optional
}

asset Feed extends AbstractSequenceAsset {
  	o FeedType type
    o String filter
}

// PARTICIPANTS

abstract participant AbstractSequenceParticipant {
  o String id
}

participant Key extends AbstractSequenceAsset {
}

participant Account extends AbstractSequenceAsset {
    o String tags optional
    o Key[] keyIds
    o Integer quorum
}

// TRANSACTIONS

// transaction builder transaction
// aggregated all of the actions as practical subtransactions 
transaction STransaction {
  o String acctionList
}

// Approve a certain action
// sign the action with a given key
transaction Approve {
  o Action action
}

// TO BE DELETED AT PRODUCTION
transaction Issue {
	--> Flavor flavorId
    o Integer amount
    o String actionTags optional
    o String tokenTags optional
    o String transactionTags optional
    --> Account destinationAccountId
}

// TO BE DELETED AT PRODUCTION
transaction Transfer {
	--> Flavor flavorId
    o Integer amount
    --> Account sourceAccountId
    --> Account destinationAccountId
    o String actionTags optional
    o String tokenTags optional
    o String transactionTags optional
}

// TO BE DELETED AT PRODUCTION
transaction Retire {
	--> Flavor flavourId
    o Integer amount
    --> Account sourceAccountId
    o String actionTags optional
    o String transactionTags optional
}

// TO BE DELETED AT PRODUCTION
transaction CreateTestData {
}

// TO BE DELETED AT PRODUCTION
transaction DeleteAllData {
}

// EVENTS

event TokenIssued {
  --> Token token
}

event TokenTransferred {
  --> Token token
}

event TokenRetired {
  --> Token token
}




